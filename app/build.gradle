apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
//Kotlin Android Extensions to use for removing findViewById
apply plugin: 'kotlin-android-extensions'
//for annotation processor using kotlin
apply plugin: 'kotlin-kapt'

android {
    compileSdkVersion rootProject.compileSdkVersion
    buildToolsVersion "30.0.1"

    defaultConfig {
        applicationId "com.faizan.hilt"
        minSdkVersion rootProject.minSdkVersion
        targetSdkVersion rootProject.targetSdkVersion
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }

    buildFeatures {
        viewBinding true
    }
}

dependencies {
    implementation fileTree(dir: "libs", include: ["*.jar"])
    implementation "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"
    //Android KTX is a set of Kotlin extensions that are included with Android Jetpack and other Android libraries. KTX extensions provide concise, idiomatic Kotlin to Jetpack, Android platform, and other APIs
    implementation "androidx.core:core-ktx:$ktxVersion"

    //appcompat
    implementation "androidx.appcompat:appcompat:$appCompatVersion"
    implementation "androidx.constraintlayout:constraintlayout:$constraintLayoutVersion"
    //recyclerview
    implementation "androidx.recyclerview:recyclerview:$recyclerViewVersion"

    //material component
    implementation "com.google.android.material:material:$materialVersion"

    //for lifecycle aware in coroutine scope
    implementation "androidx.lifecycle:lifecycle-viewmodel-ktx:$lifecycle_version"
    // LiveData
    implementation "androidx.lifecycle:lifecycle-livedata-ktx:$lifecycle_version"


    implementation "androidx.room:room-runtime:$room_version"
    kapt "androidx.room:room-compiler:$room_version" // For Kotlin use kapt instead of annotationProcessor

    implementation "com.squareup.retrofit2:retrofit:$retrofit2"

    implementation "com.squareup.okhttp3:logging-interceptor:$okhttp3"

    //image loading glide is fast then piccaso and coild
    implementation "com.github.bumptech.glide:glide:$glideVersion"
    //but coil is better for kotlin if images are not much in app
    implementation "io.coil-kt:coil:$coilVersion"


    //MOSHI for JSON
    implementation "com.squareup.retrofit2:converter-moshi:$moshiConvertor"
    implementation "com.squareup.moshi:moshi:$moshi"
    implementation "com.squareup.moshi:moshi-kotlin:$moshi"
    kapt "com.squareup.moshi:moshi-kotlin-codegen:$moshi"

    //or GSON also for JSON
    implementation "com.google.code.gson:gson:$gsonVersion"
    implementation "com.squareup.retrofit2:converter-gson:$gson"

    testImplementation "junit:junit:$junitVersion"
    androidTestImplementation 'androidx.test.ext:junit:1.1.1'
    androidTestImplementation "androidx.test.espresso:espresso-core:$espressoVersion"

}